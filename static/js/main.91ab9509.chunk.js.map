{"version":3,"sources":["components/CourseForm.js","components/CourseList.js","imges/design-features.jpg","App.js","serviceWorker.js","index.js"],"names":["CourseForm","props","onSubmit","addCourse","type","value","current","onChange","updateCourse","CourseList","state","isEdit","renderCourse","details","name","onClick","toggleState","deleteCourse","index","setState","updateCourseItem","e","preventDefault","editCourse","input","renderUpdateForm","ref","v","defaultValue","this","Component","App","courses","target","push","splice","courseList","map","course","update","handleChange","className","style","width","src","imgesBack","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yMAWeA,EATI,SAACC,GAChB,OACI,uBAAMC,SAAUD,EAAME,UAAtB,UACI,uBAAOC,KAAK,OAAOC,MAAOJ,EAAMK,QAASC,SAAUN,EAAMO,eACzD,wBAAQJ,KAAK,SAAb,4BCJNK,E,4MAEJC,MAAQ,CACNC,QAAS,G,EAIXC,aAAe,WACb,OACE,+BACI,+BAAO,EAAKX,MAAMY,QAAQC,OAC1B,wBAAQC,QAAS,WAAO,EAAKC,eAA7B,yBACA,wBAAQD,QAAS,WAAO,EAAKd,MAAMgB,aAAa,EAAKhB,MAAMiB,QAA3D,+B,EAMRF,YAAc,WACZ,IAAKL,EAAU,EAAKD,MAAfC,OACL,EAAKQ,SAAS,CACZR,QAASA,K,EAIbS,iBAAmB,SAACC,GAClBA,EAAEC,iBACF,EAAKrB,MAAMsB,WAAW,EAAKtB,MAAMiB,MAAQ,EAAKM,MAAMnB,OACpD,EAAKW,e,EAIPS,iBAAmB,WACjB,OACE,uBAAMvB,SAAU,EAAKkB,iBAArB,UACE,uBAAOhB,KAAK,OAAOsB,IAAK,SAACC,GAAO,EAAKH,MAAQG,GAAIC,aAAc,EAAK3B,MAAMY,QAAQC,OAClF,uD,4CAON,WACE,IAAKH,EAAUkB,KAAKnB,MAAfC,OACL,OACE,cAAC,WAAD,UACMA,EAASkB,KAAKJ,mBAAqBI,KAAKjB,qB,GA/C3BkB,aAqDVrB,ICvDA,MAA0B,4CCKnCsB,E,4MACJrB,MAAQ,CACNsB,QAAU,CACR,CAAClB,KAAO,QACR,CAACA,KAAO,OACR,CAACA,KAAO,WAEVR,QAAU,I,EAKZE,aAAe,SAACa,GACd,EAAKF,SAAS,CACZb,QAASe,EAAEY,OAAO5B,S,EAKtBF,UAAY,SAACkB,GACXA,EAAEC,iBACF,IAAIhB,EAAU,EAAKI,MAAMJ,QACrB0B,EAAU,EAAKtB,MAAMsB,QACzBA,EAAQE,KAAK,CAACpB,KAAMR,IACpB,EAAKa,SAAS,CACZa,UACA1B,QAAS,M,EAKbW,aAAe,SAACC,GACd,IAAIc,EAAU,EAAKtB,MAAMsB,QACzBA,EAAQG,OAAOjB,EAAQ,GACvB,EAAKC,SAAS,CACZa,a,EAKJT,WAAa,SAACL,EAAMb,GAClB,IAAI2B,EAAU,EAAKtB,MAAMsB,QACZA,EAAQd,GACf,KAAWb,EACjB,EAAKc,SAAS,CACZa,a,4CAIJ,WAAU,IAAD,OAEDI,EADYP,KAAKnB,MAAhBsB,QACoBK,KAAK,SAACC,EAASpB,GACxC,OAAO,cAAC,EAAD,CAAYL,QAASyB,EAAoBpB,MAAOA,EAAOqB,OAAQ,EAAKC,aAAcvB,aAAc,EAAKA,aAAcM,WAAY,EAAKA,YAAlGL,MAE3C,OACE,sBAAKuB,UAAU,OAAf,UACI,qBAAKA,UAAU,OAAf,SACC,qBAAKC,MAAO,CAACC,MAAM,QAASC,IAAKC,MAGlC,0BAASJ,UAAU,MAAnB,UACE,4CACA,cAAC,EAAD,CAAYnC,QAASuB,KAAKnB,MAAMJ,QAASE,aAAcqB,KAAKrB,aAAcL,UAAW0B,KAAK1B,YAC1F,6BAAKiC,c,GA/DCN,aAyEHC,ICpEKe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.91ab9509.chunk.js","sourcesContent":["import React from 'react'\n\nconst CourseForm = (props) => {\n    return (\n        <form onSubmit={props.addCourse}>\n            <input type=\"text\" value={props.current} onChange={props.updateCourse}/>\n            <button type=\"submit\">Add Course</button>\n        </form>\n    )\n}\n\nexport default CourseForm","import React, { Component ,Fragment } from 'react';\n\nclass CourseList extends Component {\n\n  state = {\n    isEdit : false\n  }\n\n  // render Course Item\n  renderCourse = () => {\n    return (\n      <li>\n          <span>{this.props.details.name}</span>\n          <button onClick={() => {this.toggleState()}}>Edit Course</button>\n          <button onClick={() => {this.props.deleteCourse(this.props.index)}}>Delete Course</button>\n      </li>\n    )\n  } \n\n  // toggleState\n  toggleState = () => {\n    let {isEdit} = this.state;\n    this.setState({\n      isEdit: !isEdit\n    })\n  }\n\n  updateCourseItem = (e) => {\n    e.preventDefault();\n    this.props.editCourse(this.props.index , this.input.value);\n    this.toggleState();\n  }\n\n  // render Update Form\n  renderUpdateForm = () => {\n    return (\n      <form onSubmit={this.updateCourseItem}>\n        <input type=\"text\" ref={(v) => {this.input = v}} defaultValue={this.props.details.name}/>\n        <button>Update Course</button>\n      </form>\n    )\n  }\n\n\n\n  render() {\n    let {isEdit} = this.state;\n    return (\n      <Fragment>\n          { isEdit ? this.renderUpdateForm() : this.renderCourse()  }\n      </Fragment>\n    );\n  }\n}\n\nexport default CourseList;\n","export default __webpack_public_path__ + \"static/media/design-features.f62b2e28.jpg\";","import React, { Component } from 'react';\nimport CourseForm from './components/CourseForm';\nimport CourseList from './components/CourseList';\nimport imgesBack from \"./imges/design-features.jpg\";\n\nclass App extends Component {\n  state = {\n    courses : [\n      {name : \"HTML\"},\n      {name : \"CSS\"},\n      {name : \"jQuery\"},\n    ] ,\n    current : ''\n  }\n\n\n  // UpdateCourse\n  updateCourse = (e) => {\n    this.setState({\n      current: e.target.value\n    })\n  }\n\n  // addCourse\n  addCourse = (e) => {\n    e.preventDefault();\n    let current = this.state.current;\n    let courses = this.state.courses;\n    courses.push({name: current})\n    this.setState({\n      courses,\n      current: ''\n    })\n  }\n\n  // deleteCourse\n  deleteCourse = (index) => {\n    let courses = this.state.courses;\n    courses.splice(index , 1);\n    this.setState({\n      courses\n    })\n  }\n\n  // editCourse \n  editCourse = (index,value) => {\n    let courses = this.state.courses;\n    let course = courses[index];\n    course['name'] = value;\n    this.setState({\n      courses\n    })\n  }\n  \n  render() {\n    const {courses} = this.state;\n    const courseList = courses.map( (course , index) => {\n      return <CourseList details={course} key={index} index={index} update={this.handleChange} deleteCourse={this.deleteCourse} editCourse={this.editCourse}/>\n    })\n    return (\n      <div className='main'>\n          <div className=\"full\" >\n           <img style={{width:`100%`}} src={imgesBack} />\n         </div>\n        \n          <section className=\"App\">\n            <h2>Add Course</h2>\n            <CourseForm current={this.state.current} updateCourse={this.updateCourse} addCourse={this.addCourse}/> \n            <ul>{courseList}</ul>\n\n        </section>\n      </div>\n         \n     \n      \n    );\n  }\n}\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}